package uk.ac.ebi.pride.gui.aspera;

import com.asperasoft.faspmanager.*;

/**
 * The fileSessionEvent method of this class serves as a listener for the
 * events generated by the fasp manager. The fasp manager reports status
 * and progress through these events to System.out.
 *
 * @author Florian Reisinger
 * @since 0.1
 */
public class DefaultAsperaTransferListener implements TransferListener
{

    // ToDo: this is based on a simple Aspera example and should perhaps be modified according to more general needs

    public synchronized void fileSessionEvent(TransferEvent event, SessionStats sessionStats, FileInfo currFileInfo)
    {

        /* BEGIN: Write data about sessions being transferred to the screen. */
        StringBuilder fileTransferData = new StringBuilder();
        if (sessionStats.isRemote())
        {
            fileTransferData.append("Server session: ");
        }
        else
        {
            fileTransferData.append("Client session: ");
        }
        fileTransferData.append(sessionStats.getId()).append(" | ").append(event);

        if (event == TransferEvent.PROGRESS)
        {
            fileTransferData.append(" | Rate: ")
                    .append(ConversionUtils.stringFromRate((long) (sessionStats
                            .getTotalTransferredBytes() * 8 / (float) (sessionStats
                            .getElapsedUSec() / (1000 * 1000)))))
                    .append(" | Target rate: ")
                    .append(ConversionUtils.stringFromRate(sessionStats.getTargetRateKbps() * 1000));
        }

        System.out.println(fileTransferData.toString());

        if (sessionStats.getState() == SessionState.FAILED)
        {
            System.out.println("    Error: " + sessionStats.getErrorCode()
                    + " (" + sessionStats.getErrorDescription() + ")");
        }

        if (event == TransferEvent.RATE_MODIFICATION)
        {
            System.out.println("    Rate parameters changed: target="
                    + ConversionUtils.stringFromRate(sessionStats
                    .getTargetRateKbps())
                    + " | minimum="
                    + ConversionUtils.stringFromRate(sessionStats
                    .getMinRateKbps())
                    + " | policy=" + sessionStats.getPolicy());
        }

        if ((currFileInfo != null)
                && (event != TransferEvent.SESSION_STOP)
                && (event != TransferEvent.RATE_MODIFICATION)
                && (event != TransferEvent.SESSION_ERROR))
        {
            System.out.println("    File: "
                    + currFileInfo.getName()
                    + " "
                    + ConversionUtils.stringFromSizeFraction(currFileInfo
                    .getWrittenBytes(), currFileInfo.getSizeBytes()));
            if (currFileInfo.getState().name().equals("FAILED"))
            {
                System.out.println("    Error: "
                        + currFileInfo.getErrDescription() + " ("
                        + currFileInfo.getErrCode() + ")");
            }
        }

        if ((event == TransferEvent.SESSION_STOP) || (event == TransferEvent.SESSION_ERROR))
        {
            FaspManager.destroy();
        }
    }
}